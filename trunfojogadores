#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Função para ler uma string com controle de tamanho
void lestring(char texto[], int tamanho) {
    setbuf(stdin, NULL);
    fgets(texto, tamanho, stdin);
    texto[strcspn(texto, "\n")] = '\0';

}

// Definição da estrutura JOGADOR
typedef struct {
    char Nomejogador[20];
    char Nacionalidade[20];
    char Clube[20];
    char POSICAO[20];
    int VELOCIDADE;
    int CHUTE;
    int PASSE;
    int DRIBLE;
    int DEFESA;
    int FISICO;
} JOGADOR;

// Função para carregar todos os jogadores do arquivo para a memória
JOGADOR* carregar_jogadores(int* tamanho) {
    FILE *arq = fopen("jogadores.dat", "rb");
    if (arq == NULL) {
        // Arquivo inexistente, inicia com 0 jogadores
        *tamanho = 0;
        return NULL;
    }

    // Calcula o número de jogadores no arquivo
    fseek(arq, 0, SEEK_END);
    *tamanho = ftell(arq) / sizeof(JOGADOR);
    rewind(arq);

    // Aloca memória para os jogadores
    JOGADOR *vetor = (JOGADOR *)malloc((*tamanho) * sizeof(JOGADOR));
    if (vetor == NULL) {
        printf("Erro ao alocar memória.\n");
        fclose(arq);
        *tamanho = 0;
        return NULL;
    }

    fread(vetor, sizeof(JOGADOR), *tamanho, arq);
    fclose(arq);
    return vetor;
}

// Função para salvar todos os jogadores da memória no arquivo
void salvar_jogadores(JOGADOR *vetor, int tamanho) {
    FILE *arq = fopen("jogadores.dat", "wb");
    if (arq == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }
    fwrite(vetor, sizeof(JOGADOR), tamanho, arq);
    fclose(arq);
}

// Função para cadastrar novos jogadores
void cadastrar_jogadores(JOGADOR **vetor, int *tamanho) {
    int capacidade = *tamanho + TAM_INICIAL;
    *vetor = (JOGADOR *)realloc(*vetor, capacidade * sizeof(JOGADOR));

    while (1) {
        JOGADOR jogador;

        printf("\nNome do jogador (ou 'fim' para encerrar):\n");
        lestring(jogador.Nomejogador, 20);
        if (strcmp(jogador.Nomejogador, "fim") == 0) {
            break;
        }

        printf("Nacionalidade:\n");
        lestring(jogador.Nacionalidade, 20);

        printf("Clube:\n");
        lestring(jogador.Clube, 20);

        printf("POSICAO (ZAGUEIRO, LATERAL, MEIA, ATACANTE):\n");
        lestring(jogador.POSICAO, 20);

        printf("DIGITE OS ATRIBUTOS DESSE JOGADOR\n");
        printf("VELOCIDADE:\n");
        scanf("%d", &jogador.VELOCIDADE);
        printf("CHUTE:\n");
        scanf("%d", &jogador.CHUTE);
        printf("PASSE:\n");
        scanf("%d", &jogador.PASSE);
        printf("DRIBLE:\n");
        scanf("%d", &jogador.DRIBLE);
        printf("DEFESA:\n");
        scanf("%d", &jogador.DEFESA);
        printf("FISICO:\n");
        scanf("%d", &jogador.FISICO);
        setbuf(stdin, NULL);

        // Adiciona o jogador ao vetor
        (*vetor)[*tamanho] = jogador;
        (*tamanho)++;
    }
}

// Função para pesquisar jogadores por nome
void pesquisar_jogador(JOGADOR *vetor, int tamanho) {
    char nome[20];
    printf("\nDigite o nome do jogador para pesquisar:\n");
    lestring(nome, 20);

    for (int i = 0; i < tamanho; i++) {
        if (strcmp(vetor[i].Nomejogador, nome) == 0) {
            printf("\nJogador encontrado:\n");
            printf("Nome: %s, Nacionalidade: %s, Clube: %s, Posição: %s\n", 
                   vetor[i].Nomejogador, vetor[i].Nacionalidade, vetor[i].Clube, vetor[i].POSICAO);
            printf("VELOCIDADE: %d, CHUTE: %d, PASSE: %d, DRIBLE: %d, DEFESA: %d, FISICO: %d\n", 
                   vetor[i].VELOCIDADE, vetor[i].CHUTE, vetor[i].PASSE, vetor[i].DRIBLE, vetor[i].DEFESA, vetor[i].FISICO);
            return;
        }
    }
    printf("Jogador não encontrado.\n");
}

// Função para excluir um jogador pelo nome
void excluir_jogador(JOGADOR **vetor, int *tamanho) {
    char nome[20];
    printf("\nDigite o nome do jogador para excluir:\n");
    lestring(nome, 20);

    for (int i = 0; i < *tamanho; i++) {
        if (strcmp((*vetor)[i].Nomejogador, nome) == 0) {
            printf("Jogador %s excluído com sucesso.\n", nome);

            // Remove o jogador movendo os elementos seguintes para trás
            for (int j = i; j < *tamanho - 1; j++) {
                (*vetor)[j] = (*vetor)[j + 1];
            }

            (*tamanho)--;
            *vetor = (JOGADOR *)realloc(*vetor, (*tamanho) * sizeof(JOGADOR));
            return;
        }
    }
    printf("Jogador não encontrado.\n");
}

// Função principal com menu
int main() {
    int tamanho;
    JOGADOR *vetor = carregar_jogadores(&tamanho);

    int opcao;

    do {
        printf("\n--- MENU ---\n");
        printf("1. Cadastrar novos jogadores\n");
        printf("2. Pesquisar jogador\n");
        printf("3. Excluir jogador\n");
        printf("4. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        setbuf(stdin, NULL);

        switch (opcao) {
            case 1:
                cadastrar_jogadores(&vetor, &tamanho);
                salvar_jogadores(vetor, tamanho);
                break;
            case 2:
                pesquisar_jogador(vetor, tamanho);
                break;
            case 3:
                excluir_jogador(&vetor, &tamanho);
                salvar_jogadores(vetor, tamanho);
                break;
            case 4:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 4);

    free(vetor);
    return 0;
}
